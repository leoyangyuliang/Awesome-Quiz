/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.fullerton.ecs.leoyang.CreatQuiz;

import edu.fullerton.ecs.leoyang.MultipleChoiceQuestion;
import edu.fullerton.ecs.leoyang.Quiz;
import edu.fullerton.ecs.leoyang.ReadObjectToBinary;
import edu.fullerton.ecs.leoyang.WriteObjectToBinary;
import edu.fullerton.ecs.leoyang.main;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.beans.PropertyVetoException;
import java.util.IllegalFormatException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;


/**
 *
 * @author 49876
 */
public class MultipleChoice extends javax.swing.JInternalFrame {

    private JDesktopPane mainpane;
    private Quiz quiz,backupQuiz;
    private int index;
    private MultipleChoiceQuestion q;
    private String questionType;

    /**
     * Creates new form MultipleChoice
     */
    public MultipleChoice() {
        initComponents();
    }

    public MultipleChoice(JDesktopPane mainpane, Quiz quiz, int index, String questionType, Quiz backupQuiz) {
        initComponents();
        this.backupQuiz=backupQuiz;
        this.mainpane = mainpane;
        this.quiz = quiz;
        this.index = index;
        this.questionType = questionType;
        questionnumber.setText(questionType + ": Question#" + Integer.toString(index + 1));
        question.setText("");
        points.setText("");
        choiceA.setText("");
        choiceB.setText("");
        choiceC.setText("");
        choiceD.setText("");
        answer.setText("");
    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionnumber = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        question = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        answer = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        choiceA = new javax.swing.JTextField();
        choiceB = new javax.swing.JTextField();
        choiceC = new javax.swing.JTextField();
        choiceD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        points = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        backup = new javax.swing.JCheckBox();

        questionnumber.setText("Multiple Choice Question");

        jLabel1.setText("Question: ");

        jLabel2.setText("A: ");

        jLabel3.setText("C:");

        jLabel4.setText("B:");

        jLabel5.setText("D:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        answer.setToolTipText("For Multiple Choice enter only one character between A-D, for Multiple Answers enter more than one character between A-D");
        answer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerActionPerformed(evt);
            }
        });

        choiceC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(choiceA, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(choiceB)
                    .addComponent(choiceC)
                    .addComponent(choiceD))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(choiceA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(choiceB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(choiceC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(choiceD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel6.setText("Answer:");

        points.setToolTipText("Enter Number Only (Integer or Decimal)");

        jLabel8.setText("Points:");

        jButton1.setText("Create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        backup.setText("Back Up This Question");
        backup.setToolTipText("Save this question for future quiz");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(points, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(questionnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(521, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backup)
                .addGap(197, 197, 197))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(points, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(question, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(162, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backup)
                        .addGap(26, 26, 26)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );

        answer.getAccessibleContext().setAccessibleName("");
        answer.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void choiceCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceCActionPerformed

    private void answerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean qualify=true;
        String str = "abcd";
        if(questionType.equals("Multiple Choice"))
        {
             try
            {
                Double.parseDouble(points.getText());
                points.setBackground(Color.white);
            }catch(IllegalFormatException e)
            {
                points.setBackground(Color.red);
                qualify = false;
            }catch(NumberFormatException ea)
            {
                points.setBackground(Color.red);
                System.out.println("points not pass");
                qualify = false;
            }
            if(question.getText().equals(""))
            {
                question.setBackground(Color.red);
                qualify = false;
            }
            else if(!question.getText().equals(""))
            {
                question.setBackground(Color.white);
            }
            if(choiceA.getText().equals(""))
            {
                choiceA.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceA.getText().equals(""))
            {
                choiceA.setBackground(Color.white);
            }
            if(choiceB.getText().equals(""))
            {
                choiceB.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceB.getText().equals(""))
            {
                choiceB.setBackground(Color.white);
            }
            if(choiceC.getText().equals(""))
            {
                choiceC.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceC.getText().equals(""))
            {
                choiceC.setBackground(Color.white);
            }
            if(choiceD.getText().equals(""))
            {
                choiceD.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceD.getText().equals(""))
            {
                choiceD.setBackground(Color.white);
            }
          
            if(answer.getText().length()!=1 || !str.contains(answer.getText().toLowerCase()))
            {
               
                answer.setBackground(Color.red);
                qualify=false;
            }
            else if(answer.getText().length()==1 && str.contains(answer.getText().toLowerCase()))
            {
               
                answer.setBackground(Color.white);
            }
            
        }     
        else if(questionType.equals("Multiple Answers"))
            {
             try
            {
                Double.parseDouble(points.getText());
                points.setBackground(Color.white);
            }catch(IllegalFormatException e)
            {
                points.setBackground(Color.red);
                qualify = false;
            }catch(NumberFormatException ea)
            {
                points.setBackground(Color.red);
                 System.out.println("points not pass");
                qualify = false;
            }
            if(question.getText().equals(""))
            {
                question.setBackground(Color.red);
                qualify = false;
            }
            else if(!question.getText().equals(""))
            {
                question.setBackground(Color.white);
            }
            if(choiceA.getText().equals(""))
            {
                choiceA.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceA.getText().equals(""))
            {
                choiceA.setBackground(Color.white);
            }
            if(choiceB.getText().equals(""))
            {
                choiceB.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceB.getText().equals(""))
            {
                choiceB.setBackground(Color.white);
            }
            if(choiceC.getText().equals(""))
            {
                choiceC.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceC.getText().equals(""))
            {
                choiceC.setBackground(Color.white);
            }
            if(choiceD.getText().equals(""))
            {
                choiceD.setBackground(Color.red);
                qualify = false;
            }
            else if(!choiceD.getText().equals(""))
            {
                choiceD.setBackground(Color.white);
            }
            checkAnswer:
            if(answer.getText().length()<1 ||  answer.getText().length()>4 )
            {
                 System.out.println("check length not passed");
                answer.setBackground(Color.red);
                qualify=false;
            }
            else if(answer.getText().length()>1 && answer.getText().length()<=4)
            {
                System.out.println("check length passed");
               for(int i = 0 ; i< answer.getText().length(); i ++)
               {
                   char c  = answer.getText().toLowerCase().charAt(i);
                   for(int k=0;k<answer.getText().length();k++)
                   {
                       if(i!=k)
                       {
                           if(c == answer.getText().toLowerCase().charAt(k))
                           {
                               System.out.println("check repetition not pass   ");
                               answer.setBackground(Color.red);   
                               break checkAnswer;
                           }
                       }
                   }
                   if(!str.contains(Character.toString(c)))
                   {
                       System.out.println("check letters not pass   ");
                       answer.setBackground(Color.red);   
                       break checkAnswer;
                   }
               }
               System.out.println("pass   ");
                answer.setBackground(Color.white);
            }
            
        }
       
        
        if(qualify){
            String[] possibleAnswer = new String[4];
            possibleAnswer[0] = choiceA.getText();
            possibleAnswer[1] = choiceB.getText();
            possibleAnswer[2] = choiceC.getText();
            possibleAnswer[3] = choiceD.getText();
            q = new MultipleChoiceQuestion(question.getText(), answer.getText(), Double.parseDouble(points.getText()), questionType, possibleAnswer.clone());
            quiz.addQuestion(q.clone());
            this.index++;
                    if(backup.isSelected())
            {
               backupQuiz.addQuestion(q.clone());
            }
            if (this.index < quiz.getMaxQuestion()) {
                questionnumber.setText("working");
                TypeOfQuestion b = new TypeOfQuestion(mainpane, quiz, index,backupQuiz);
                mainpane.add(b);
                b.show();
                try {
                    b.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(SetUpQuiz.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.dispose();
            } else if (this.index == quiz.getMaxQuestion()) {
                //questionIndex.setText("not working");
                
                /*writer = new WriteObjectToBinary();
                writer.writeToBinary(quiz, quiz.getName());
                writer.writeToBinary(backupQuiz, backupQuiz.getName());
                */
               
                ExecutorService exec = Executors.newCachedThreadPool();
                exec.execute(new WriteObjectToBinary(backupQuiz,"BackUpQuestion.bin"));
            
                exec.execute(new WriteObjectToBinary(quiz, quiz.getName()));
                

                quiz.saveQuizName();
                this.dispose();

                main.a.enableMenuBar();
            }
        }

        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answer;
    private javax.swing.JCheckBox backup;
    private javax.swing.JTextField choiceA;
    private javax.swing.JTextField choiceB;
    private javax.swing.JTextField choiceC;
    private javax.swing.JTextField choiceD;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField points;
    private javax.swing.JTextField question;
    private javax.swing.JLabel questionnumber;
    // End of variables declaration//GEN-END:variables
}
